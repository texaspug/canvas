<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>9th Grade English Literary Terms Matching Game</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
        }
        #game-container {
            position: relative;
            width: 800px;
            height: 600px;
        }
        #game-canvas {
            position: absolute;
            top: 0;
            left: 0;
            border: 2px solid #333;
            background-color: #fff;
        }
        #terms, #definitions {
            position: absolute;
            top: 0;
            width: 350px;
        }
        #terms {
            left: 10px;
        }
        #definitions {
            right: 10px;
        }
        .item {
            display: flex;
            align-items: center;
            margin: 10px 0;
            font-size: 14px;
            height: 25px;
        }
        .dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: black;
            margin-right: 10px;
            cursor: pointer;
        }
        #feedback {
            margin-top: 620px;
            font-size: 18px;
            font-weight: bold;
        }
        #restart {
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }
        #restart:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas" width="800" height="600"></canvas>
        <div id="terms"></div>
        <div id="definitions"></div>
    </div>
    <div id="feedback"></div>
    <button id="restart" onclick="resetGame()">Restart Game</button>
    <script>
        const termPairs = [
            { id: 1, term: "Metaphor", definition: "A figure of speech comparing two unlike things without using 'like' or 'as'." },
            { id: 2, term: "Simile", definition: "A comparison using 'like' or 'as'." },
            { id: 3, term: "Alliteration", definition: "Repetition of initial consonant sounds in close proximity." },
            { id: 4, term: "Personification", definition: "Giving human characteristics to non-human entities." },
            { id: 5, term: "Theme", definition: "The central idea or message in a literary work." },
            { id: 6, term: "Irony", definition: "A contrast between expectation and reality." },
            { id: 7, term: "Symbolism", definition: "Using an object or action to represent something beyond itself." },
            { id: 8, term: "Foreshadowing", definition: "Hints or clues about future events in a story." },
            { id: 9, term: "Protagonist", definition: "The main character in a story." },
            { id: 10, term: "Antagonist", definition: "The character or force opposing the protagonist." },
            { id: 11, term: "Imagery", definition: "Vivid descriptive language appealing to the senses." },
            { id: 12, term: "Tone", definition: "The author's attitude toward the subject or audience." },
            { id: 13, term: "Mood", definition: "The emotional atmosphere created by a literary work." },
            { id: 14, term: "Allusion", definition: "A reference to another work, person, or event." },
            { id: 15, term: "Conflict", definition: "A struggle between opposing forces in a story." }
        ];

        let termsList = [];
        let definitionsList = [];
        let connections = [];
        let selectedTerm = null;
        let matchedPairs = 0;
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function shuffleWithNoAlignment() {
            let aligned;
            do {
                termsList = termPairs.map(pair => ({ id: pair.id, term: pair.term }));
                definitionsList = termPairs.map(pair => ({ id: pair.id, definition: pair.definition }));
                shuffle(termsList);
                shuffle(definitionsList);
                aligned = termsList.some((term, index) => term.id === definitionsList[index].id);
            } while (aligned);
        }

        function renderLists() {
            const termsDiv = document.getElementById('terms');
            const definitionsDiv = document.getElementById('definitions');
            termsDiv.innerHTML = '';
            definitionsDiv.innerHTML = '';

            termsList.forEach((term, index) => {
                const div = document.createElement('div');
                div.className = 'item';
                div.innerHTML = `<div class="dot" data-term-index="${index}"></div><span style="color: ${connections.some(conn => conn.term === index && connections.some(c => c.term === conn.term && c.definition === conn.definition)) ? 'green' : 'black'}">${term.term}</span>`;
                termsDiv.appendChild(div);
            });

            definitionsList.forEach((def, index) => {
                const div = document.createElement('div');
                div.className = 'item';
                div.innerHTML = `<div class="dot" data-definition-index="${index}"></div><span style="color: ${connections.some(conn => conn.definition === index && connections.some(c => c.term === conn.term && c.definition === conn.definition)) ? 'green' : 'black'}">${def.definition}</span>`;
                definitionsDiv.appendChild(div);
            });
        }

        function drawLines() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            connections.forEach(conn => {
                const termY = 50 + conn.term * 35;
                const defY = 50 + conn.definition * 35;
                ctx.beginPath();
                ctx.moveTo(50, termY);
                ctx.lineTo(750, defY);
                ctx.strokeStyle = 'black';
                ctx.stroke();
            });

            if (selectedTerm !== null) {
                const termY = 50 + selectedTerm * 35;
                ctx.beginPath();
                ctx.moveTo(50, termY);
                ctx.lineTo(canvas.mouseX || 0, canvas.mouseY || 0);
                ctx.strokeStyle = 'blue';
                ctx.stroke();
            }
        }

        function init() {
            shuffleWithNoAlignment();
            renderLists();
            drawLines();
            updateFeedback();

            const termsDiv = document.getElementById('terms');
            termsDiv.addEventListener('mousedown', (e) => {
                if (e.target.classList.contains('dot')) {
                    const index = parseInt(e.target.dataset.termIndex);
                    if (!connections.some(conn => conn.term === index)) {
                        selectedTerm = index;
                        canvas.mouseX = e.clientX - canvas.getBoundingClientRect().left;
                        canvas.mouseY = e.clientY - canvas.getBoundingClientRect().top;
                        drawLines();
                    }
                }
            });

            const definitionsDiv = document.getElementById('definitions');
            definitionsDiv.addEventListener('mouseup', (e) => {
                if (selectedTerm !== null && e.target.classList.contains('dot')) {
                    const index = parseInt(e.target.dataset.definitionIndex);
                    if (!connections.some(conn => conn.definition === index)) {
                        if (termsList[selectedTerm].id === definitionsList[index].id) {
                            connections.push({ term: selectedTerm, definition: index });
                            matchedPairs++;
                            renderLists();
                        }
                        drawLines();
                        updateFeedback();
                    }
                    selectedTerm = null;
                }
            });

            canvas.addEventListener('mousemove', (e) => {
                if (selectedTerm !== null) {
                    canvas.mouseX = e.clientX - canvas.getBoundingClientRect().left;
                    canvas.mouseY = e.clientY - canvas.getBoundingClientRect().top;
                    drawLines();
                }
            });

            canvas.addEventListener('mouseup', () => {
                selectedTerm = null;
                drawLines();
            });
        }

        function updateFeedback() {
            const feedback = document.getElementById('feedback');
            feedback.textContent = `Matches: ${matchedPairs}/15`;
            if (matchedPairs === 15) {
                feedback.textContent = "Congratulations! All matches correct!";
            }
        }

        function resetGame() {
            connections = [];
            selectedTerm = null;
            matchedPairs = 0;
            shuffleWithNoAlignment();
            renderLists();
            drawLines();
            updateFeedback();
        }

        init();
    </script>
</body>
</html>
